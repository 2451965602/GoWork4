// Code generated by hertz generator.

package interact

import (
	"context"
	"work4/biz/pack"
	"work4/biz/service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"work4/biz/model/interact"
)

// Like .
// @router /like/action [POST]
func Like(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.LikeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(interact.LikeResponse)

	err = service.NewInteractService(ctx, c).Like(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)

	pack.SendResponse(c, resp, consts.StatusOK)
}

// LikeList .
// @router /like/list [GET]
func LikeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.LikeListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(interact.LikeListResponse)

	interactResp, count, err := service.NewInteractService(ctx, c).LikeList(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.LikeList(interactResp, count)

	pack.SendResponse(c, resp, consts.StatusOK)
}

// Comment .
// @router /comment/publish [POST]
func Comment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.CommentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(interact.CommentResponse)

	err = service.NewInteractService(ctx, c).Comment(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)

	pack.SendResponse(c, resp, consts.StatusOK)
}

// CommentList .
// @router /comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(interact.CommentListResponse)

	interactResp, count, err := service.NewInteractService(ctx, c).CommentList(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.CommentList(interactResp, count)

	pack.SendResponse(c, resp, consts.StatusOK)
}

// DeleteComment .
// @router /comment/delete [DELETE]
func DeleteComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.DeleteCommentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(interact.DeleteCommentResponse)

	err = service.NewInteractService(ctx, c).DeleteComment(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)

	pack.SendResponse(c, resp, consts.StatusOK)
}
