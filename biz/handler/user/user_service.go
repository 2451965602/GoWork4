// Code generated by hertz generator.

package user

import (
	"context"
	"work4/biz/middleware"
	"work4/biz/pack"
	"work4/biz/service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"work4/biz/model/user"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.RegisterResponse)

	userResp, err := service.NewUserService(ctx, c).Register(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.User(userResp)
	pack.SendResponse(c, resp, consts.StatusOK)
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.LoginResponse)

	userResp, err := service.NewUserService(ctx, c).Login(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	middleware.AccessTokenJwtMiddleware.LoginHandler(ctx, c)
	middleware.RefreshTokenJwtMiddleware.LoginHandler(ctx, c)

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.UserInfo(userResp)
	resp.AccessToken = c.GetString("Access-Token")
	resp.RefreshToken = c.GetString("Refresh-Token")

	pack.SendResponse(c, resp, consts.StatusOK)
}

// Info .
// @router /user/info [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.InfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.InfoResponse)

	userResp, err := service.NewUserService(ctx, c).GetInfo(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.UserInfo(userResp)

	pack.SendResponse(c, resp, consts.StatusOK)
}

// Upload .
// @router /user/avatar/upload [PUT]
func Upload(ctx context.Context, c *app.RequestContext) {
	var err error
	data, err := c.FormFile("data")
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.UploadResponse)

	userResp, err := service.NewUserService(ctx, c).UploadAvatar(data)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.User(userResp)

	pack.SendResponse(c, resp, consts.StatusOK)
}

// MFAGet .
// @router /auth/mfa/qrcode [GET]
func MFAGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.MFAGetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.MFAGetResponse)

	userResp, err := service.NewUserService(ctx, c).MFAGet()

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.MFA(userResp)

	pack.SendResponse(c, resp, consts.StatusOK)
}

// MFA .
// @router /auth/mfa/bind [POST]
func MFA(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.MFABindRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.MFABindResponse)

	err = service.NewUserService(ctx, c).MFABind(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)

	pack.SendResponse(c, resp, consts.StatusOK)
}
